Ruby Combined Comparison Operator
In Ruby, the combined comparison operator, <=>, 
also known as the spaceship operator is used to compare two objects. 
It returns 0 if the first operand equals the second, 1 if the first operand is greater 
than the second, and -1 if the first operand is less than the second.

Ruby Method Splat
In a Ruby method, a splat (*) operator is used to indicate that a parameter can have 
an unknown number of arguments.

Ruby Block Parameter
In Ruby, a method can take a block as a parameter.
Passing a block to a method is a great way of abstracting certain tasks from the method 
and defining those tasks when we call the method.

Ruby Return
In Ruby, the return keyword is used to pass back a value from a method.

Ruby Sort Method
In Ruby, the .sort array method is used to sort items in an array in ascending order 
(least to greatest).


Ruby Combined Comparison Operator
In Ruby, the combined comparison operator, <=>, also known as the spaceship operator is used to compare two objects. It returns 0 if the first operand equals the second, 1 if the first operand is greater than the second, and -1 if the first operand is less than the second.

puts "Keanu" <=> "Adrianna" # The first letters of each word are compared in ASCII order and since "K" comes after "A", 1 is printed.

puts 1 <=> 2 # -1

puts 3 <=> 3 # 0

#<=> can also be used inside of a block and to sort values in descending order:
my_array = [3, 0, 8, 7, 1, 6, 5, 9, 4]
my_array.sort! { |first_num, second_num| second_num <=> first_num }
print my_array
#Output => [9, 8, 7, 6, 5, 4, 3, 1, 0]

Ruby Method Splat
In a Ruby method, a splat (*) operator is used to indicate that a parameter can have an unknown number of arguments.

#The * preceding the parameter "clubs" allows for multiple arguments to be passed into the method when you actually call it.
def extra_curriculars(*clubs)
  clubs.each { |club| puts "After school, I'm involved with #{club}" }
end

extra_curriculars("chess club", "gymnastics", "anime club", "library services")

#Output
#After school, I'm involved with chess club
#After school, I'm involved with gymnastics
#After school, I'm involved with anime club
#After school, I'm involved with library services
Ruby Block Parameter
In Ruby, a method can take a block as a parameter.

Passing a block to a method is a great way of abstracting certain tasks from the method and defining those tasks when we call the method.

# The block, {|i| puts i}, is passed the current array item each time it is evaluated. This block prints the item. 
[1, 2, 3, 4, 5].each { |i| puts i }
Ruby Return
In Ruby, the return keyword is used to pass back a value from a method.

def generous_tip(bill)
  return bill * (0.25)
end

generous_tip(100) # 25

#In this example, the generous_tip method is returning the product of bill and 0.25. In order to see that value, a "puts" or "print" can be added before the method call.
Ruby Sort Method
In Ruby, the .sort array method is used to sort items in an array in ascending order (least to greatest).

my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]
my_array.sort!
#Attaching an ! to the end of .sort or any other Ruby method modifies the original array.
print my_array
# => [1, 2, 3, 4, 5, 6, 7, 8, 9]
#If you didn't use !, print my_array returns the original array.


Ruby Method Parameters & Arguments
In Ruby, parameters are placeholders for real values or arguments passed into a method 
when it is called. When calling a method that requires parameters, arguments 
(ie. real values) must be passed in for those parameters.

Ruby Case Statement
In Ruby, a case statement is a more concise alternative to an if/else statement that contains many conditions.

Ruby .respond_to?
In Ruby, .respond_to? takes a symbol representing a method name and returns true if that method can be called on the object and false otherwise.

Ruby Short-Circuit Evaluation
When Ruby evaluates expressions containing boolean operators, it uses short-circuit evaluation. With ||, if the expression on the left evaluates to true, it will return true. Otherwise, it will check if the expression on the right evaluates to true. If so, the expression returns true; otherwise, it will return false.
With &&, both the expression on the left and the expression on the right have to evaluate to true in order to return true. If either expression is false, it will return false

Ruby Ternary Operator
In Ruby, a ternary operator is a more concise alternative to an if/else. It consists of a conditional, followed by ? and an expression to be evaluated if the conditional is true, and then : and an expression to evaluate if the conditional is false.

Ruby .upto and .downto Methods
In Ruby, the .upto and .downto methods are used to iterate over a specific range of values.

Ruby .call Method
In Ruby, a proc and a lambda can be called directly using the .call method.

Why Procs?
Why bother saving our blocks as procs? There are two main advantages:
Procs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)
Unlike blocks, procs can be called over and over without rewriting them. This prevents you from having to retype the contents of your block every time you need to execute a particular bit of code.

Symbols, Meet Procs
Now that you’re learning some of the more complex parts of the Ruby language, you can combine them to work some truly arcane magicks. For instance, remember when we told you that you could pass a Ruby method name around with a symbol? Well, you can also convert symbols to procs using that handy little &.
By mapping &:to_i over every element of strings, we turned each string into an integer!

The Ruby Lambda
Like procs, lambdas are objects. The similarities don’t stop there: with the exception of a bit of syntax and a few behavioral quirks, lambdas are identical to procs.

Ruby .collect Method
In Ruby, the .collect array method takes a block and applies the expression in the block to every element of an array.

Ruby yield Keyword
In Ruby, the yield keyword is used to transfer control from a method to a block and then back to the method once executed.

Ruby proc
In Ruby, a proc is an instance of the Proc class and is similar to a block. As opposed to a block, a proc is a Ruby object which can be stored in a variable and therefore reused many times throughout a program.
